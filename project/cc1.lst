
AVRASM ver. 2.1.30  C:\Users\MELÝSA\Desktop\project\cc1.asm Tue Jan 15 14:33:51 2019

C:\Users\MELÝSA\Desktop\project\cc1.asm(1099): warning: Register r3 already defined by the .DEF directive
C:\Users\MELÝSA\Desktop\project\cc1.asm(1100): warning: Register r2 already defined by the .DEF directive
C:\Users\MELÝSA\Desktop\project\cc1.asm(1101): warning: Register r5 already defined by the .DEF directive
C:\Users\MELÝSA\Desktop\project\cc1.asm(1102): warning: Register r4 already defined by the .DEF directive
C:\Users\MELÝSA\Desktop\project\cc1.asm(1103): warning: Register r7 already defined by the .DEF directive
C:\Users\MELÝSA\Desktop\project\cc1.asm(1104): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.34 Evaluation
                 ;(C) Copyright 1998-2018 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : No
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 	.EQU GPIOR1=0x2A
                 	.EQU GPIOR2=0x2B
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R3
                 	.DEF _rx_rd_index0=R2
                 	.DEF _rx_counter0=R5
                 	.DEF _tx_wr_index0=R4
                 	.DEF _tx_rd_index0=R7
                 	.DEF _tx_counter0=R6
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 00fc 	JMP  _timer1_compa_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0099 	JMP  _usart0_rx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 00c9 	JMP  _usart0_tx_isr
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00003e 2710
00003f 03e8
000040 0064
000041 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000042 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000043 1000
000044 0100
000045 0010
000046 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000047 0a0d
000048 7753
000049 6556
00004a 7372      	.DB  0xD,0xA,0x53,0x77,0x56,0x65,0x72,0x73
00004b 6f69
00004c 3a6e
00004d 6425
00004e 252e      	.DB  0x69,0x6F,0x6E,0x3A,0x25,0x64,0x2E,0x25
00004f 4764
000050 6f72
000051 7075
000052 3146      	.DB  0x64,0x47,0x72,0x6F,0x75,0x70,0x46,0x31
000053 0a0d
C:\Users\MELÝSA\Desktop\project\cc1.asm(1160): warning: .cseg .db misalignment - padding zero byte
000054 0000      	.DB  0xD,0xA,0x0
                 _0x2040060:
C:\Users\MELÝSA\Desktop\project\cc1.asm(1162): warning: .cseg .db misalignment - padding zero byte
000055 0001      	.DB  0x1
                 _0x2040000:
000056 4e2d
000057 4e41
000058 4900
000059 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\MELÝSA\Desktop\project\cc1.asm(1165): warning: .cseg .db misalignment - padding zero byte
00005a 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00005b 0001      	.DW  0x01
00005c 0210      	.DW  __seed_G102
00005d 00aa      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
00005e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005f 94f8      	CLI
000060 27ee      	CLR  R30
000061 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000062 e0f1      	LDI  R31,1
000063 bff5      	OUT  MCUCR,R31
000064 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000065 e1f8      	LDI  R31,0x18
000066 95a8      	WDR
000067 b7a4      	IN   R26,MCUSR
000068 7fa7      	CBR  R26,8
000069 bfa4      	OUT  MCUSR,R26
00006a 93f0 0060 	STS  WDTCSR,R31
00006c 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
00006e e08d      	LDI  R24,(14-2)+1
00006f e0a2      	LDI  R26,2
000070 27bb      	CLR  R27
                 __CLEAR_REG:
000071 93ed      	ST   X+,R30
000072 958a      	DEC  R24
000073 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000074 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000075 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000076 e0a0      	LDI  R26,LOW(__SRAM_START)
000077 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000078 93ed      	ST   X+,R30
000079 9701      	SBIW R24,1
00007a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007b ebe6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007d 9185      	LPM  R24,Z+
00007e 9195      	LPM  R25,Z+
00007f 9700      	SBIW R24,0
000080 f061      	BREQ __GLOBAL_INI_END
000081 91a5      	LPM  R26,Z+
000082 91b5      	LPM  R27,Z+
000083 9005      	LPM  R0,Z+
000084 9015      	LPM  R1,Z+
000085 01bf      	MOVW R22,R30
000086 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000087 9005      	LPM  R0,Z+
000088 920d      	ST   X+,R0
000089 9701      	SBIW R24,1
00008a f7e1      	BRNE __GLOBAL_INI_LOOP
00008b 01fb      	MOVW R30,R22
00008c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00008d e0e0      	LDI  R30,__GPIOR0_INIT
00008e bbee      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
00008f bdea      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000090 bdeb      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000091 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000092 bfed      	OUT  SPL,R30
000093 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000094 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000095 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000096 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000097 940c 0102 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x01
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;/*********************************************
                 ;Project : Test software
                 ;**********************************************
                 ;Chip type: ATmega164A
                 ;Clock frequency: 20 MHz
                 ;Compilers:  CVAVR 2.x
                 ;*********************************************/
                 ;
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;#include "defs.h"
                 ;
                 ;//*************************************************************************************************
                 ;//*********** BEGIN SERIAL STUFF (interrupt-driven, generated by Code Wizard) *********************
                 ;//*************************************************************************************************
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 8
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0046 {
                 
                 	.CSEG
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
000099 d287      	RCALL SUBOPT_0x0
                 ; 0000 0047 char status,data;
                 ; 0000 0048 status=UCSR0A;
00009a 931a      	ST   -Y,R17
00009b 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00009c 9110 00c0 	LDS  R17,192
                 ; 0000 0049 data=UDR0;
00009e 9100 00c6 	LDS  R16,198
                 ; 0000 004A if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000a0 2fe1      	MOV  R30,R17
0000a1 71ec      	ANDI R30,LOW(0x1C)
0000a2 f481      	BRNE _0x3
                 ; 0000 004B    {
                 ; 0000 004C    rx_buffer0[rx_wr_index0++]=data;
0000a3 2de3      	MOV  R30,R3
0000a4 9433      	INC  R3
0000a5 e0f0      	LDI  R31,0
0000a6 50e0      	SUBI R30,LOW(-_rx_buffer0)
0000a7 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
0000a8 8300      	ST   Z,R16
                 ; 0000 004D #if RX_BUFFER_SIZE0 == 256
                 ; 0000 004E    // special case for receiver buffer size=256
                 ; 0000 004F    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 0050 #else
                 ; 0000 0051    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0000a9 e0e8      	LDI  R30,LOW(8)
0000aa 15e3      	CP   R30,R3
0000ab f409      	BRNE _0x4
0000ac 2433      	CLR  R3
                 ; 0000 0052    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x4:
0000ad 9453      	INC  R5
0000ae e0e8      	LDI  R30,LOW(8)
0000af 15e5      	CP   R30,R5
0000b0 f411      	BRNE _0x5
                 ; 0000 0053       {
                 ; 0000 0054       rx_counter0=0;
0000b1 2455      	CLR  R5
                 ; 0000 0055       rx_buffer_overflow0=1;
0000b2 9af0      	SBI  0x1E,0
                 ; 0000 0056       }
                 ; 0000 0057 #endif
                 ; 0000 0058    }
                 _0x5:
                 ; 0000 0059 }
                 _0x3:
0000b3 9109      	LD   R16,Y+
0000b4 9119      	LD   R17,Y+
0000b5 c023      	RJMP _0x32
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0060 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0061 char data;
                 ; 0000 0062 while (rx_counter0==0);
0000b6 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x8:
0000b7 2055      	TST  R5
0000b8 f3f1      	BREQ _0x8
                 ; 0000 0063 data=rx_buffer0[rx_rd_index0++];
0000b9 2de2      	MOV  R30,R2
0000ba 9423      	INC  R2
0000bb e0f0      	LDI  R31,0
0000bc 50e0      	SUBI R30,LOW(-_rx_buffer0)
0000bd 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
0000be 8110      	LD   R17,Z
                 ; 0000 0064 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0065 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0000bf e0e8      	LDI  R30,LOW(8)
0000c0 15e2      	CP   R30,R2
0000c1 f409      	BRNE _0xB
0000c2 2422      	CLR  R2
                 ; 0000 0066 #endif
                 ; 0000 0067 #asm("cli")
                 _0xB:
0000c3 94f8      	CLI
                 ; 0000 0068 --rx_counter0;
0000c4 945a      	DEC  R5
                 ; 0000 0069 #asm("sei")
0000c5 9478      	SEI
                 ; 0000 006A return data;
0000c6 2fe1      	MOV  R30,R17
0000c7 9119      	LD   R17,Y+
0000c8 9508      	RET
                 ; 0000 006B }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 007B {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
0000c9 d257      	RCALL SUBOPT_0x0
                 ; 0000 007C if (tx_counter0)
0000ca 2066      	TST  R6
0000cb f069      	BREQ _0xC
                 ; 0000 007D    {
                 ; 0000 007E    --tx_counter0;
0000cc 946a      	DEC  R6
                 ; 0000 007F    UDR0=tx_buffer0[tx_rd_index0++];
0000cd 2de7      	MOV  R30,R7
0000ce 9473      	INC  R7
0000cf e0f0      	LDI  R31,0
0000d0 5fe8      	SUBI R30,LOW(-_tx_buffer0)
0000d1 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0000d2 81e0      	LD   R30,Z
0000d3 93e0 00c6 	STS  198,R30
                 ; 0000 0080 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0081    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0000d5 e0e8      	LDI  R30,LOW(8)
0000d6 15e7      	CP   R30,R7
0000d7 f409      	BRNE _0xD
0000d8 2477      	CLR  R7
                 ; 0000 0082 #endif
                 ; 0000 0083    }
                 _0xD:
                 ; 0000 0084 }
                 _0xC:
                 _0x32:
0000d9 91e9      	LD   R30,Y+
0000da bfef      	OUT  SREG,R30
0000db 91f9      	LD   R31,Y+
0000dc 91e9      	LD   R30,Y+
0000dd 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 008B {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 008C while (tx_counter0 == TX_BUFFER_SIZE0);
0000de 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xE:
0000df e0e8      	LDI  R30,LOW(8)
0000e0 15e6      	CP   R30,R6
0000e1 f3e9      	BREQ _0xE
                 ; 0000 008D #asm("cli")
0000e2 94f8      	CLI
                 ; 0000 008E if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
0000e3 2066      	TST  R6
0000e4 f421      	BRNE _0x12
0000e5 91e0 00c0 	LDS  R30,192
0000e7 72e0      	ANDI R30,LOW(0x20)
0000e8 f469      	BRNE _0x11
                 _0x12:
                 ; 0000 008F    {
                 ; 0000 0090    tx_buffer0[tx_wr_index0++]=c;
0000e9 2de4      	MOV  R30,R4
0000ea 9443      	INC  R4
0000eb e0f0      	LDI  R31,0
0000ec 5fe8      	SUBI R30,LOW(-_tx_buffer0)
0000ed 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0000ee 81a8      	LD   R26,Y
0000ef 83a0      	STD  Z+0,R26
                 ; 0000 0091 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0092    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
0000f0 e0e8      	LDI  R30,LOW(8)
0000f1 15e4      	CP   R30,R4
0000f2 f409      	BRNE _0x14
0000f3 2444      	CLR  R4
                 ; 0000 0093 #endif
                 ; 0000 0094    ++tx_counter0;
                 _0x14:
0000f4 9463      	INC  R6
                 ; 0000 0095    }
                 ; 0000 0096 else
0000f5 c003      	RJMP _0x15
                 _0x11:
                 ; 0000 0097    UDR0=c;
0000f6 81e8      	LD   R30,Y
0000f7 93e0 00c6 	STS  198,R30
                 ; 0000 0098 #asm("sei")
                 _0x15:
0000f9 9478      	SEI
                 ; 0000 0099 }
0000fa 9621      	ADIW R28,1
0000fb 9508      	RET
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;//*************************************************************************************************
                 ;//********************END SERIAL STUFF (USART0)  **************************************************
                 ;//*************************************************************************************************
                 ;//*******   if you need USART1, enable it in Code Wizard and copy coresponding code here  *********
                 ;//*************************************************************************************************
                 ;
                 ;/*
                 ; * Timer 1 Output Compare A interrupt is used to blink LED
                 ; */
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 00A6 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
                 ; 0000 00A7 LED1 = ~LED1; // invert LED
0000fc 9b5e      	SBIS 0xB,6
0000fd c002      	RJMP _0x16
0000fe 985e      	CBI  0xB,6
0000ff c001      	RJMP _0x17
                 _0x16:
000100 9a5e      	SBI  0xB,6
                 _0x17:
                 ; 0000 00A8 }
000101 9518      	RETI
                 ; .FEND
                 ;
                 ;/*
                 ; * main function of program
                 ; */
                 ;void main (void)
                 ; 0000 00AE {
                 _main:
                 ; .FSTART _main
                 ; 0000 00AF unsigned char temp,i;
                 ; 0000 00B0 
                 ; 0000 00B1 	Init_initController();  // this must be the first "init" action/call!
                 ;	temp -> R17
                 ;	i -> R16
000102 d04d      	RCALL _Init_initController
                 ; 0000 00B2 	#asm("sei")             // enable interrupts
000103 9478      	SEI
                 ; 0000 00B3 	LED1 = 1;           	// initial state, will be changed by timer 1
000104 9a5e      	SBI  0xB,6
                 ; 0000 00B4 
                 ; 0000 00B5 	while(TRUE)
                 _0x1A:
                 ; 0000 00B6 	{
                 ; 0000 00B7 		wdogtrig();	        // call often else processor will reset
000105 95a8      	WDR
                 ; 0000 00B8 		if(rx_counter0)     // if a character is available on serial port USART0
000106 2055      	TST  R5
000107 f0c9      	BREQ _0x1D
                 ; 0000 00B9 		{
                 ; 0000 00BA 			temp = getchar();
000108 dfad      	RCALL _getchar
000109 2f1e      	MOV  R17,R30
                 ; 0000 00BB 			if(temp == '?')
00010a 331f      	CPI  R17,63
00010b f491      	BRNE _0x1E
                 ; 0000 00BC 				printf("\r\nSwVersion:%d.%dGroupF1\r\n", SW_VERSION/10, SW_VERSION%10);
                +
00010c e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00010d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00010e 93fa      	ST   -Y,R31
00010f 93ea      	ST   -Y,R30
                +
000110 e0e1     +LDI R30 , LOW ( 0x1 )
000111 e0f0     +LDI R31 , HIGH ( 0x1 )
000112 e060     +LDI R22 , BYTE3 ( 0x1 )
000113 e070     +LDI R23 , BYTE4 ( 0x1 )
                 	__GETD1N 0x1
000114 d257      	RCALL __PUTPARD1
                +
000115 e0e3     +LDI R30 , LOW ( 0x3 )
000116 e0f0     +LDI R31 , HIGH ( 0x3 )
000117 e060     +LDI R22 , BYTE3 ( 0x3 )
000118 e070     +LDI R23 , BYTE4 ( 0x3 )
                 	__GETD1N 0x3
000119 d252      	RCALL __PUTPARD1
00011a e088      	LDI  R24,8
00011b d1c9      	RCALL _printf
00011c 962a      	ADIW R28,10
                 ; 0000 00BD 			else
00011d c003      	RJMP _0x1F
                 _0x1E:
                 ; 0000 00BE 				putchar(temp+1);		// echo back the character + 1 ("a" becomes "b", etc)
00011e 2fa1      	MOV  R26,R17
00011f 5faf      	SUBI R26,-LOW(1)
000120 dfbd      	RCALL _putchar
                 ; 0000 00BF 		}
                 _0x1F:
                 ; 0000 00C0 
                 ; 0000 00C1         if(SW1 == 0)        // pressed
                 _0x1D:
000121 994d      	SBIC 0x9,5
000122 c021      	RJMP _0x20
                 ; 0000 00C2         {
                 ; 0000 00C3             delay_ms(30);   // debounce switch
000123 e1ae      	LDI  R26,LOW(30)
000124 e0b0      	LDI  R27,0
000125 d24b      	RCALL _delay_ms
                 ; 0000 00C4             if(SW1 == 0)
000126 994d      	SBIC 0x9,5
000127 c01c      	RJMP _0x21
                 ; 0000 00C5             {                // LED will blink slow or fast
                 ; 0000 00C6                 while(SW1==0)
                 _0x22:
000128 994d      	SBIC 0x9,5
000129 c002      	RJMP _0x24
                 ; 0000 00C7                     wdogtrig();    // wait for release
00012a 95a8      	WDR
                 ; 0000 00C8                 // alternate between values and values/4 for OCR1A register
                 ; 0000 00C9                 // 4C40H / 4 = 1310H
                 ; 0000 00CA                 // new frequency = old frequency * 4
                 ; 0000 00CB                 if(OCR1AH == 0x98)
00012b cffc      	RJMP _0x22
                 _0x24:
00012c 91a0 0089 	LDS  R26,137
00012e 39a8      	CPI  R26,LOW(0x98)
00012f f431      	BRNE _0x25
                 ; 0000 00CC                     {TCNT1H=0; TCNT1L=0; OCR1AH = 0x13; OCR1AL = 0x10;}
000130 d1f5      	RCALL SUBOPT_0x1
000131 e1e3      	LDI  R30,LOW(19)
000132 93e0 0089 	STS  137,R30
000134 e1e0      	LDI  R30,LOW(16)
000135 c00c      	RJMP _0x31
                 ; 0000 00CD 
                 ; 0000 00CE                 else if(OCR1AH == 0x13)
                 _0x25:
000136 91a0 0089 	LDS  R26,137
000138 31a3      	CPI  R26,LOW(0x13)
000139 f419      	BRNE _0x27
                 ; 0000 00CF                     {TCNT1H=0; TCNT1L=0; OCR1AH = 0x4C; OCR1AL = 0x40;}
00013a d1eb      	RCALL SUBOPT_0x1
00013b d1f0      	RCALL SUBOPT_0x2
00013c c005      	RJMP _0x31
                 ; 0000 00D0                 else
                 _0x27:
                 ; 0000 00D1                     {TCNT1H=0; TCNT1L=0; OCR1AH = 0x98; OCR1AL = 0x80;}
00013d d1e8      	RCALL SUBOPT_0x1
00013e e9e8      	LDI  R30,LOW(152)
00013f 93e0 0089 	STS  137,R30
000141 e8e0      	LDI  R30,LOW(128)
                 _0x31:
000142 93e0 0088 	STS  136,R30
                 ; 0000 00D2 
                 ; 0000 00D3             }
                 ; 0000 00D4         }
                 _0x21:
                 ; 0000 00D5 
                 ; 0000 00D6         // measure time intervals on oscilloscope connected to pin TESTP
                 ; 0000 00D7         for(i=0; i<3; i++) {
                 _0x20:
000144 e000      	LDI  R16,LOW(0)
                 _0x2A:
000145 3003      	CPI  R16,3
000146 f438      	BRSH _0x2B
                 ; 0000 00D8             TESTP = 1;
000147 9a5c      	SBI  0xB,4
                 ; 0000 00D9             delay_us(1);
                +
000148 e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
000149 958a     +DEC R24
00014a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
                 ; 0000 00DA             TESTP = 0;   // may check accuracy of 1us interval on oscilloscope
00014b 985c      	CBI  0xB,4
                 ; 0000 00DB         }
00014c 5f0f      	SUBI R16,-1
00014d cff7      	RJMP _0x2A
                 _0x2B:
                 ; 0000 00DC     }
00014e cfb6      	RJMP _0x1A
                 ; 0000 00DD 
                 ; 0000 00DE 
                 ; 0000 00DF }// end main loop
                 _0x30:
00014f cfff      	RJMP _0x30
                 ; .FEND
                 ;
                 ;
                 ;/* initialization file */
                 ;
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "defs.h"
                 ;
                 ;
                 ;/*
                 ; * most intialization values are generated using Code Wizard and depend on clock value
                 ; */
                 ;void Init_initController(void)
                 ; 0001 000B {
                 
                 	.CSEG
                 _Init_initController:
                 ; .FSTART _Init_initController
                 ; 0001 000C // Crystal Oscillator division factor: 1
                 ; 0001 000D #pragma optsize-
                 ; 0001 000E CLKPR=0x80;
000150 e8e0      	LDI  R30,LOW(128)
000151 93e0 0061 	STS  97,R30
                 ; 0001 000F CLKPR=0x00;
000153 e0e0      	LDI  R30,LOW(0)
000154 93e0 0061 	STS  97,R30
                 ; 0001 0010 #ifdef _OPTIMIZE_SIZE_
                 ; 0001 0011 #pragma optsize+
                 ; 0001 0012 #endif
                 ; 0001 0013 
                 ; 0001 0014 // Input/Output Ports initialization
                 ; 0001 0015 // Port A initialization
                 ; 0001 0016 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 0017 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 0018 PORTA=0x00;
000156 b9e2      	OUT  0x2,R30
                 ; 0001 0019 DDRA=0x00;
000157 b9e1      	OUT  0x1,R30
                 ; 0001 001A 
                 ; 0001 001B // Port B initialization
                 ; 0001 001C PORTB=0x00;
000158 b9e5      	OUT  0x5,R30
                 ; 0001 001D DDRB=0x00;
000159 b9e4      	OUT  0x4,R30
                 ; 0001 001E 
                 ; 0001 001F // Port C initialization
                 ; 0001 0020 PORTC=0x00;
00015a b9e8      	OUT  0x8,R30
                 ; 0001 0021 DDRC=0x00;
00015b b9e7      	OUT  0x7,R30
                 ; 0001 0022 
                 ; 0001 0023 // Port D initialization
                 ; 0001 0024 PORTD=0b00100000; // D.5 needs pull-up resistor
00015c e2e0      	LDI  R30,LOW(32)
00015d b9eb      	OUT  0xB,R30
                 ; 0001 0025 DDRD= 0b01010000; // D.6 is LED, D.4 is test output
00015e e5e0      	LDI  R30,LOW(80)
00015f b9ea      	OUT  0xA,R30
                 ; 0001 0026 
                 ; 0001 0027 // Timer/Counter 0 initialization
                 ; 0001 0028 // Clock source: System Clock
                 ; 0001 0029 // Clock value: Timer 0 Stopped
                 ; 0001 002A // Mode: Normal top=FFh
                 ; 0001 002B // OC0 output: Disconnected
                 ; 0001 002C TCCR0A=0x00;
000160 e0e0      	LDI  R30,LOW(0)
000161 bde4      	OUT  0x24,R30
                 ; 0001 002D TCCR0B=0x00;
000162 bde5      	OUT  0x25,R30
                 ; 0001 002E TCNT0=0x00;
000163 bde6      	OUT  0x26,R30
                 ; 0001 002F OCR0A=0x00;
000164 bde7      	OUT  0x27,R30
                 ; 0001 0030 OCR0B=0x00;
000165 bde8      	OUT  0x28,R30
                 ; 0001 0031 
                 ; 0001 0032 // Timer/Counter 1 initialization
                 ; 0001 0033 // Clock source: System Clock
                 ; 0001 0034 // Clock value: 19.531 kHz = CLOCK/256
                 ; 0001 0035 // Mode: CTC top=OCR1A
                 ; 0001 0036 // OC1A output: Discon.
                 ; 0001 0037 // OC1B output: Discon.
                 ; 0001 0038 // Noise Canceler: Off
                 ; 0001 0039 // Input Capture on Falling Edge
                 ; 0001 003A // Timer 1 Overflow Interrupt: Off
                 ; 0001 003B // Input Capture Interrupt: Off
                 ; 0001 003C // Compare A Match Interrupt: On
                 ; 0001 003D // Compare B Match Interrupt: Off
                 ; 0001 003E 
                 ; 0001 003F TCCR1A=0x00;
000166 93e0 0080 	STS  128,R30
                 ; 0001 0040 TCCR1B=0x0D;
000168 e0ed      	LDI  R30,LOW(13)
000169 93e0 0081 	STS  129,R30
                 ; 0001 0041 TCNT1H=0x00;
00016b d1ba      	RCALL SUBOPT_0x1
                 ; 0001 0042 TCNT1L=0x00;
                 ; 0001 0043 ICR1H=0x00;
00016c e0e0      	LDI  R30,LOW(0)
00016d 93e0 0087 	STS  135,R30
                 ; 0001 0044 ICR1L=0x00;
00016f 93e0 0086 	STS  134,R30
                 ; 0001 0045 
                 ; 0001 0046 // 1 sec = 19531 counts = 4C41H counts, from 0 to 4C40
                 ; 0001 0047 // 4C40H = 4CH (MSB) and 40H (LSB)
                 ; 0001 0048 OCR1AH=0x4C;
000171 d1ba      	RCALL SUBOPT_0x2
                 ; 0001 0049 OCR1AL=0x40;
000172 93e0 0088 	STS  136,R30
                 ; 0001 004A 
                 ; 0001 004B OCR1BH=0x00;
000174 e0e0      	LDI  R30,LOW(0)
000175 93e0 008b 	STS  139,R30
                 ; 0001 004C OCR1BL=0x00;
000177 93e0 008a 	STS  138,R30
                 ; 0001 004D 
                 ; 0001 004E // Timer/Counter 2 initialization
                 ; 0001 004F // Clock source: System Clock
                 ; 0001 0050 // Clock value: Timer2 Stopped
                 ; 0001 0051 // Mode: Normal top=0xFF
                 ; 0001 0052 // OC2A output: Disconnected
                 ; 0001 0053 // OC2B output: Disconnected
                 ; 0001 0054 ASSR=0x00;
000179 93e0 00b6 	STS  182,R30
                 ; 0001 0055 TCCR2A=0x00;
00017b 93e0 00b0 	STS  176,R30
                 ; 0001 0056 TCCR2B=0x00;
00017d 93e0 00b1 	STS  177,R30
                 ; 0001 0057 TCNT2=0x00;
00017f 93e0 00b2 	STS  178,R30
                 ; 0001 0058 OCR2A=0x00;
000181 93e0 00b3 	STS  179,R30
                 ; 0001 0059 OCR2B=0x00;
000183 93e0 00b4 	STS  180,R30
                 ; 0001 005A 
                 ; 0001 005B // External Interrupt(s) initialization
                 ; 0001 005C // INT0: Off
                 ; 0001 005D // INT1: Off
                 ; 0001 005E // INT2: Off
                 ; 0001 005F // Interrupt on any change on pins PCINT0-7: Off
                 ; 0001 0060 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0001 0061 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0001 0062 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0001 0063 EICRA=0x00;
000185 93e0 0069 	STS  105,R30
                 ; 0001 0064 EIMSK=0x00;
000187 bbed      	OUT  0x1D,R30
                 ; 0001 0065 PCICR=0x00;
000188 93e0 0068 	STS  104,R30
                 ; 0001 0066 
                 ; 0001 0067 // Timer/Counter 0,1,2 Interrupt(s) initialization
                 ; 0001 0068 TIMSK0=0x00;
00018a 93e0 006e 	STS  110,R30
                 ; 0001 0069 TIMSK1=0x02;
00018c e0e2      	LDI  R30,LOW(2)
00018d 93e0 006f 	STS  111,R30
                 ; 0001 006A TIMSK2=0x00;
00018f e0e0      	LDI  R30,LOW(0)
000190 93e0 0070 	STS  112,R30
                 ; 0001 006B 
                 ; 0001 006C // USART0 initialization
                 ; 0001 006D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 006E // USART0 Receiver: On
                 ; 0001 006F // USART0 Transmitter: On
                 ; 0001 0070 // USART0 Mode: Asynchronous
                 ; 0001 0071 // USART0 Baud rate: 9600
                 ; 0001 0072 UCSR0A=0x00;
000192 93e0 00c0 	STS  192,R30
                 ; 0001 0073 UCSR0B=0xD8;
000194 ede8      	LDI  R30,LOW(216)
000195 93e0 00c1 	STS  193,R30
                 ; 0001 0074 UCSR0C=0x06;
000197 e0e6      	LDI  R30,LOW(6)
000198 93e0 00c2 	STS  194,R30
                 ; 0001 0075 UBRR0H=0x00;
00019a e0e0      	LDI  R30,LOW(0)
00019b 93e0 00c5 	STS  197,R30
                 ; 0001 0076 UBRR0L=0x81;
00019d e8e1      	LDI  R30,LOW(129)
00019e 93e0 00c4 	STS  196,R30
                 ; 0001 0077 
                 ; 0001 0078 // USART1 initialization
                 ; 0001 0079 // USART1 disabled
                 ; 0001 007A UCSR1B=0x00;
0001a0 e0e0      	LDI  R30,LOW(0)
0001a1 93e0 00c9 	STS  201,R30
                 ; 0001 007B 
                 ; 0001 007C 
                 ; 0001 007D // Analog Comparator initialization
                 ; 0001 007E // Analog Comparator: Off
                 ; 0001 007F // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0001 0080 ACSR=0x80;
0001a3 e8e0      	LDI  R30,LOW(128)
0001a4 bfe0      	OUT  0x30,R30
                 ; 0001 0081 ADCSRB=0x00;
0001a5 e0e0      	LDI  R30,LOW(0)
0001a6 93e0 007b 	STS  123,R30
                 ; 0001 0082 DIDR1=0x00;
0001a8 93e0 007f 	STS  127,R30
                 ; 0001 0083 
                 ; 0001 0084 // Watchdog Timer initialization
                 ; 0001 0085 // Watchdog Timer Prescaler: OSC/2048
                 ; 0001 0086 #pragma optsize-
                 ; 0001 0087 #asm("wdr")
0001aa 95a8      	WDR
                 ; 0001 0088 // Write 2 consecutive values to enable watchdog
                 ; 0001 0089 // this is NOT a mistake !
                 ; 0001 008A WDTCSR=0x18;
0001ab e1e8      	LDI  R30,LOW(24)
0001ac 93e0 0060 	STS  96,R30
                 ; 0001 008B WDTCSR=0x08;
0001ae e0e8      	LDI  R30,LOW(8)
0001af 93e0 0060 	STS  96,R30
                 ; 0001 008C #ifdef _OPTIMIZE_SIZE_
                 ; 0001 008D #pragma optsize+
                 ; 0001 008E #endif
                 ; 0001 008F 
                 ; 0001 0090 }
0001b1 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
0001b2 93ba      	ST   -Y,R27
0001b3 93aa      	ST   -Y,R26
0001b4 81aa      	LDD  R26,Y+2
0001b5 df28      	RCALL _putchar
0001b6 81a8      	LD   R26,Y
0001b7 81b9      	LDD  R27,Y+1
0001b8 91ed      	LD   R30,X+
0001b9 91fd      	LD   R31,X+
0001ba 9631      	ADIW R30,1
0001bb 93fe      	ST   -X,R31
0001bc 93ee      	ST   -X,R30
0001bd 9623      	ADIW R28,3
0001be 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0001bf 93ba      	ST   -Y,R27
0001c0 93aa      	ST   -Y,R26
0001c1 9726      	SBIW R28,6
0001c2 d18b      	RCALL __SAVELOCR6
0001c3 e010      	LDI  R17,0
0001c4 85ac      	LDD  R26,Y+12
0001c5 85bd      	LDD  R27,Y+12+1
0001c6 e0e0      	LDI  R30,LOW(0)
0001c7 e0f0      	LDI  R31,HIGH(0)
0001c8 93ed      	ST   X+,R30
0001c9 93fc      	ST   X,R31
                 _0x2000016:
0001ca 89ea      	LDD  R30,Y+18
0001cb 89fb      	LDD  R31,Y+18+1
0001cc 9631      	ADIW R30,1
0001cd 8bea      	STD  Y+18,R30
0001ce 8bfb      	STD  Y+18+1,R31
0001cf 9731      	SBIW R30,1
0001d0 91e4      	LPM  R30,Z
0001d1 2f2e      	MOV  R18,R30
0001d2 30e0      	CPI  R30,0
0001d3 f409      	BRNE PC+2
0001d4 c109      	RJMP _0x2000018
0001d5 2fe1      	MOV  R30,R17
0001d6 30e0      	CPI  R30,0
0001d7 f431      	BRNE _0x200001C
0001d8 3225      	CPI  R18,37
0001d9 f411      	BRNE _0x200001D
0001da e011      	LDI  R17,LOW(1)
0001db c001      	RJMP _0x200001E
                 _0x200001D:
0001dc d154      	RCALL SUBOPT_0x3
                 _0x200001E:
0001dd c0ff      	RJMP _0x200001B
                 _0x200001C:
0001de 30e1      	CPI  R30,LOW(0x1)
0001df f4a1      	BRNE _0x200001F
0001e0 3225      	CPI  R18,37
0001e1 f411      	BRNE _0x2000020
0001e2 d14e      	RCALL SUBOPT_0x3
0001e3 c0f8      	RJMP _0x20000CC
                 _0x2000020:
0001e4 e012      	LDI  R17,LOW(2)
0001e5 e040      	LDI  R20,LOW(0)
0001e6 e000      	LDI  R16,LOW(0)
0001e7 322d      	CPI  R18,45
0001e8 f411      	BRNE _0x2000021
0001e9 e001      	LDI  R16,LOW(1)
0001ea c0f2      	RJMP _0x200001B
                 _0x2000021:
0001eb 322b      	CPI  R18,43
0001ec f411      	BRNE _0x2000022
0001ed e24b      	LDI  R20,LOW(43)
0001ee c0ee      	RJMP _0x200001B
                 _0x2000022:
0001ef 3220      	CPI  R18,32
0001f0 f411      	BRNE _0x2000023
0001f1 e240      	LDI  R20,LOW(32)
0001f2 c0ea      	RJMP _0x200001B
                 _0x2000023:
0001f3 c002      	RJMP _0x2000024
                 _0x200001F:
0001f4 30e2      	CPI  R30,LOW(0x2)
0001f5 f439      	BRNE _0x2000025
                 _0x2000024:
0001f6 e050      	LDI  R21,LOW(0)
0001f7 e013      	LDI  R17,LOW(3)
0001f8 3320      	CPI  R18,48
0001f9 f411      	BRNE _0x2000026
0001fa 6800      	ORI  R16,LOW(128)
0001fb c0e1      	RJMP _0x200001B
                 _0x2000026:
0001fc c003      	RJMP _0x2000027
                 _0x2000025:
0001fd 30e3      	CPI  R30,LOW(0x3)
0001fe f009      	BREQ PC+2
0001ff c0dd      	RJMP _0x200001B
                 _0x2000027:
000200 3320      	CPI  R18,48
000201 f010      	BRLO _0x200002A
000202 332a      	CPI  R18,58
000203 f008      	BRLO _0x200002B
                 _0x200002A:
000204 c007      	RJMP _0x2000029
                 _0x200002B:
000205 e0aa      	LDI  R26,LOW(10)
000206 9f5a      	MUL  R21,R26
000207 2d50      	MOV  R21,R0
000208 2fe2      	MOV  R30,R18
000209 53e0      	SUBI R30,LOW(48)
00020a 0f5e      	ADD  R21,R30
00020b c0d1      	RJMP _0x200001B
                 _0x2000029:
00020c 2fe2      	MOV  R30,R18
00020d 36e3      	CPI  R30,LOW(0x63)
00020e f439      	BRNE _0x200002F
00020f d128      	RCALL SUBOPT_0x4
000210 89e8      	LDD  R30,Y+16
000211 89f9      	LDD  R31,Y+16+1
000212 81a4      	LDD  R26,Z+4
000213 93aa      	ST   -Y,R26
000214 d129      	RCALL SUBOPT_0x5
000215 c0c6      	RJMP _0x2000030
                 _0x200002F:
000216 37e3      	CPI  R30,LOW(0x73)
000217 f429      	BRNE _0x2000032
000218 d11f      	RCALL SUBOPT_0x4
000219 d12a      	RCALL SUBOPT_0x6
00021a d0ed      	RCALL _strlen
00021b 2f1e      	MOV  R17,R30
00021c c007      	RJMP _0x2000033
                 _0x2000032:
00021d 37e0      	CPI  R30,LOW(0x70)
00021e f449      	BRNE _0x2000035
00021f d118      	RCALL SUBOPT_0x4
000220 d123      	RCALL SUBOPT_0x6
000221 d0f2      	RCALL _strlenf
000222 2f1e      	MOV  R17,R30
000223 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000224 6002      	ORI  R16,LOW(2)
000225 770f      	ANDI R16,LOW(127)
000226 e030      	LDI  R19,LOW(0)
000227 c038      	RJMP _0x2000036
                 _0x2000035:
000228 36e4      	CPI  R30,LOW(0x64)
000229 f011      	BREQ _0x2000039
00022a 36e9      	CPI  R30,LOW(0x69)
00022b f411      	BRNE _0x200003A
                 _0x2000039:
00022c 6004      	ORI  R16,LOW(4)
00022d c002      	RJMP _0x200003B
                 _0x200003A:
00022e 37e5      	CPI  R30,LOW(0x75)
00022f f431      	BRNE _0x200003C
                 _0x200003B:
000230 e7ec      	LDI  R30,LOW(_tbl10_G100*2)
000231 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000232 83ee      	STD  Y+6,R30
000233 83ff      	STD  Y+6+1,R31
000234 e015      	LDI  R17,LOW(5)
000235 c00c      	RJMP _0x200003D
                 _0x200003C:
000236 35e8      	CPI  R30,LOW(0x58)
000237 f411      	BRNE _0x200003F
000238 6008      	ORI  R16,LOW(8)
000239 c003      	RJMP _0x2000040
                 _0x200003F:
00023a 37e8      	CPI  R30,LOW(0x78)
00023b f009      	BREQ PC+2
00023c c09f      	RJMP _0x2000071
                 _0x2000040:
00023d e8e6      	LDI  R30,LOW(_tbl16_G100*2)
00023e e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00023f 83ee      	STD  Y+6,R30
000240 83ff      	STD  Y+6+1,R31
000241 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000242 ff02      	SBRS R16,2
000243 c015      	RJMP _0x2000042
000244 d0f3      	RCALL SUBOPT_0x4
000245 89a8      	LDD  R26,Y+16
000246 89b9      	LDD  R27,Y+16+1
000247 9614      	ADIW R26,4
000248 91ed      	LD   R30,X+
000249 91fd      	LD   R31,X+
00024a 87ea      	STD  Y+10,R30
00024b 87fb      	STD  Y+10+1,R31
00024c 85ab      	LDD  R26,Y+11
00024d 23aa      	TST  R26
00024e f422      	BRPL _0x2000043
00024f d110      	RCALL __ANEGW1
000250 87ea      	STD  Y+10,R30
000251 87fb      	STD  Y+10+1,R31
000252 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000253 3040      	CPI  R20,0
000254 f011      	BREQ _0x2000044
000255 5f1f      	SUBI R17,-LOW(1)
000256 c001      	RJMP _0x2000045
                 _0x2000044:
000257 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000258 c007      	RJMP _0x2000046
                 _0x2000042:
000259 d0de      	RCALL SUBOPT_0x4
00025a 89a8      	LDD  R26,Y+16
00025b 89b9      	LDD  R27,Y+16+1
00025c 9614      	ADIW R26,4
00025d d106      	RCALL __GETW1P
00025e 87ea      	STD  Y+10,R30
00025f 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
000260 fd00      	SBRC R16,0
000261 c010      	RJMP _0x2000047
                 _0x2000048:
000262 1715      	CP   R17,R21
000263 f470      	BRSH _0x200004A
000264 ff07      	SBRS R16,7
000265 c008      	RJMP _0x200004B
000266 ff02      	SBRS R16,2
000267 c004      	RJMP _0x200004C
000268 7f0b      	ANDI R16,LOW(251)
000269 2f24      	MOV  R18,R20
00026a 5011      	SUBI R17,LOW(1)
00026b c001      	RJMP _0x200004D
                 _0x200004C:
00026c e320      	LDI  R18,LOW(48)
                 _0x200004D:
00026d c001      	RJMP _0x200004E
                 _0x200004B:
00026e e220      	LDI  R18,LOW(32)
                 _0x200004E:
00026f d0c1      	RCALL SUBOPT_0x3
000270 5051      	SUBI R21,LOW(1)
000271 cff0      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000272 2f31      	MOV  R19,R17
000273 ff01      	SBRS R16,1
000274 c016      	RJMP _0x200004F
                 _0x2000050:
000275 3030      	CPI  R19,0
000276 f099      	BREQ _0x2000052
000277 ff03      	SBRS R16,3
000278 c006      	RJMP _0x2000053
000279 81ee      	LDD  R30,Y+6
00027a 81ff      	LDD  R31,Y+6+1
00027b 9125      	LPM  R18,Z+
00027c 83ee      	STD  Y+6,R30
00027d 83ff      	STD  Y+6+1,R31
00027e c005      	RJMP _0x2000054
                 _0x2000053:
00027f 81ae      	LDD  R26,Y+6
000280 81bf      	LDD  R27,Y+6+1
000281 912d      	LD   R18,X+
000282 83ae      	STD  Y+6,R26
000283 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000284 d0ac      	RCALL SUBOPT_0x3
000285 3050      	CPI  R21,0
000286 f009      	BREQ _0x2000055
000287 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000288 5031      	SUBI R19,LOW(1)
000289 cfeb      	RJMP _0x2000050
                 _0x2000052:
00028a c048      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00028b e320      	LDI  R18,LOW(48)
00028c 81ee      	LDD  R30,Y+6
00028d 81ff      	LDD  R31,Y+6+1
00028e d0d9      	RCALL __GETW1PF
00028f 87e8      	STD  Y+8,R30
000290 87f9      	STD  Y+8+1,R31
000291 81ee      	LDD  R30,Y+6
000292 81ff      	LDD  R31,Y+6+1
000293 9632      	ADIW R30,2
000294 83ee      	STD  Y+6,R30
000295 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000296 85e8      	LDD  R30,Y+8
000297 85f9      	LDD  R31,Y+8+1
000298 85aa      	LDD  R26,Y+10
000299 85bb      	LDD  R27,Y+10+1
00029a 17ae      	CP   R26,R30
00029b 07bf      	CPC  R27,R31
00029c f050      	BRLO _0x200005C
00029d 5f2f      	SUBI R18,-LOW(1)
00029e 85a8      	LDD  R26,Y+8
00029f 85b9      	LDD  R27,Y+8+1
0002a0 85ea      	LDD  R30,Y+10
0002a1 85fb      	LDD  R31,Y+10+1
0002a2 1bea      	SUB  R30,R26
0002a3 0bfb      	SBC  R31,R27
0002a4 87ea      	STD  Y+10,R30
0002a5 87fb      	STD  Y+10+1,R31
0002a6 cfef      	RJMP _0x200005A
                 _0x200005C:
0002a7 332a      	CPI  R18,58
0002a8 f028      	BRLO _0x200005D
0002a9 ff03      	SBRS R16,3
0002aa c002      	RJMP _0x200005E
0002ab 5f29      	SUBI R18,-LOW(7)
0002ac c001      	RJMP _0x200005F
                 _0x200005E:
0002ad 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0002ae fd04      	SBRC R16,4
0002af c019      	RJMP _0x2000061
0002b0 3321      	CPI  R18,49
0002b1 f420      	BRSH _0x2000063
0002b2 85a8      	LDD  R26,Y+8
0002b3 85b9      	LDD  R27,Y+8+1
0002b4 9711      	SBIW R26,1
0002b5 f409      	BRNE _0x2000062
                 _0x2000063:
0002b6 c009      	RJMP _0x20000CD
                 _0x2000062:
0002b7 1753      	CP   R21,R19
0002b8 f010      	BRLO _0x2000067
0002b9 ff00      	SBRS R16,0
0002ba c001      	RJMP _0x2000068
                 _0x2000067:
0002bb c011      	RJMP _0x2000066
                 _0x2000068:
0002bc e220      	LDI  R18,LOW(32)
0002bd ff07      	SBRS R16,7
0002be c00a      	RJMP _0x2000069
0002bf e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0002c0 6100      	ORI  R16,LOW(16)
0002c1 ff02      	SBRS R16,2
0002c2 c006      	RJMP _0x200006A
0002c3 7f0b      	ANDI R16,LOW(251)
0002c4 934a      	ST   -Y,R20
0002c5 d078      	RCALL SUBOPT_0x5
0002c6 3050      	CPI  R21,0
0002c7 f009      	BREQ _0x200006B
0002c8 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002c9 d067      	RCALL SUBOPT_0x3
0002ca 3050      	CPI  R21,0
0002cb f009      	BREQ _0x200006C
0002cc 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002cd 5031      	SUBI R19,LOW(1)
0002ce 85a8      	LDD  R26,Y+8
0002cf 85b9      	LDD  R27,Y+8+1
0002d0 9712      	SBIW R26,2
0002d1 f008      	BRLO _0x2000059
0002d2 cfb8      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002d3 ff00      	SBRS R16,0
0002d4 c007      	RJMP _0x200006D
                 _0x200006E:
0002d5 3050      	CPI  R21,0
0002d6 f029      	BREQ _0x2000070
0002d7 5051      	SUBI R21,LOW(1)
0002d8 e2e0      	LDI  R30,LOW(32)
0002d9 93ea      	ST   -Y,R30
0002da d063      	RCALL SUBOPT_0x5
0002db cff9      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002dc e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002dd ceec      	RJMP _0x2000016
                 _0x2000018:
0002de 85ac      	LDD  R26,Y+12
0002df 85bd      	LDD  R27,Y+12+1
0002e0 91ed      	LD   R30,X+
0002e1 91fd      	LD   R31,X+
0002e2 d072      	RCALL __LOADLOCR6
0002e3 9664      	ADIW R28,20
0002e4 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
0002e5 92ff      	PUSH R15
0002e6 2ef8      	MOV  R15,R24
0002e7 9726      	SBIW R28,6
0002e8 931a      	ST   -Y,R17
0002e9 930a      	ST   -Y,R16
0002ea 01de      	MOVW R26,R28
0002eb 9614      	ADIW R26,4
0002ec d06f      	RCALL __ADDW2R15
0002ed 018d      	MOVW R16,R26
0002ee e0e0      	LDI  R30,LOW(0)
0002ef 83ec      	STD  Y+4,R30
0002f0 83ed      	STD  Y+4+1,R30
0002f1 83ee      	STD  Y+6,R30
0002f2 83ef      	STD  Y+6+1,R30
0002f3 01de      	MOVW R26,R28
0002f4 9618      	ADIW R26,8
0002f5 d066      	RCALL __ADDW2R15
0002f6 91ed      	LD   R30,X+
0002f7 91fd      	LD   R31,X+
0002f8 93fa      	ST   -Y,R31
0002f9 93ea      	ST   -Y,R30
0002fa 931a      	ST   -Y,R17
0002fb 930a      	ST   -Y,R16
0002fc ebe2      	LDI  R30,LOW(_put_usart_G100)
0002fd e0f1      	LDI  R31,HIGH(_put_usart_G100)
0002fe 93fa      	ST   -Y,R31
0002ff 93ea      	ST   -Y,R30
000300 01de      	MOVW R26,R28
000301 9618      	ADIW R26,8
000302 debc      	RCALL __print_G100
000303 8119      	LDD  R17,Y+1
000304 8108      	LDD  R16,Y+0
000305 9628      	ADIW R28,8
000306 90ff      	POP  R15
000307 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000308 93ba      	ST   -Y,R27
000309 93aa      	ST   -Y,R26
00030a 91a9          ld   r26,y+
00030b 91b9          ld   r27,y+
00030c 27ee          clr  r30
00030d 27ff          clr  r31
                 strlen0:
00030e 916d          ld   r22,x+
00030f 2366          tst  r22
000310 f011          breq strlen1
000311 9631          adiw r30,1
000312 cffb          rjmp strlen0
                 strlen1:
000313 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000314 93ba      	ST   -Y,R27
000315 93aa      	ST   -Y,R26
000316 27aa          clr  r26
000317 27bb          clr  r27
000318 91e9          ld   r30,y+
000319 91f9          ld   r31,y+
                 strlenf0:
00031a 9005      	lpm  r0,z+
00031b 2000          tst  r0
00031c f011          breq strlenf1
00031d 9611          adiw r26,1
00031e cffb          rjmp strlenf0
                 strlenf1:
00031f 01fd          movw r30,r26
000320 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer0:
000200           	.BYTE 0x8
                 _tx_buffer0:
000208           	.BYTE 0x8
                 __seed_G102:
000210           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000321 93ea      	ST   -Y,R30
000322 93fa      	ST   -Y,R31
000323 b7ef      	IN   R30,SREG
000324 93ea      	ST   -Y,R30
000325 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000326 e0e0      	LDI  R30,LOW(0)
000327 93e0 0085 	STS  133,R30
000329 93e0 0084 	STS  132,R30
00032b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00032c e4ec      	LDI  R30,LOW(76)
00032d 93e0 0089 	STS  137,R30
00032f e4e0      	LDI  R30,LOW(64)
000330 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x3:
000331 932a      	ST   -Y,R18
000332 85ad      	LDD  R26,Y+13
000333 85be      	LDD  R27,Y+13+1
000334 85ef      	LDD  R30,Y+15
000335 89f8      	LDD  R31,Y+15+1
000336 9509      	ICALL
000337 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x4:
000338 89e8      	LDD  R30,Y+16
000339 89f9      	LDD  R31,Y+16+1
00033a 9734      	SBIW R30,4
00033b 8be8      	STD  Y+16,R30
00033c 8bf9      	STD  Y+16+1,R31
00033d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
00033e 85ad      	LDD  R26,Y+13
00033f 85be      	LDD  R27,Y+13+1
000340 85ef      	LDD  R30,Y+15
000341 89f8      	LDD  R31,Y+15+1
000342 9509      	ICALL
000343 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
000344 89a8      	LDD  R26,Y+16
000345 89b9      	LDD  R27,Y+16+1
000346 9614      	ADIW R26,4
000347 91ed      	LD   R30,X+
000348 91fd      	LD   R31,X+
000349 83ee      	STD  Y+6,R30
00034a 83ff      	STD  Y+6+1,R31
00034b 81ae      	LDD  R26,Y+6
00034c 81bf      	LDD  R27,Y+6+1
00034d 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
00034e 935a      	ST   -Y,R21
                 __SAVELOCR5:
00034f 934a      	ST   -Y,R20
                 __SAVELOCR4:
000350 933a      	ST   -Y,R19
                 __SAVELOCR3:
000351 932a      	ST   -Y,R18
                 __SAVELOCR2:
000352 931a      	ST   -Y,R17
000353 930a      	ST   -Y,R16
000354 9508      	RET
                 
                 __LOADLOCR6:
000355 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000356 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000357 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000358 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000359 8119      	LDD  R17,Y+1
00035a 8108      	LD   R16,Y
00035b 9508      	RET
                 
                 __ADDW2R15:
00035c 2400      	CLR  R0
00035d 0daf      	ADD  R26,R15
00035e 1db0      	ADC  R27,R0
00035f 9508      	RET
                 
                 __ANEGW1:
000360 95f1      	NEG  R31
000361 95e1      	NEG  R30
000362 40f0      	SBCI R31,0
000363 9508      	RET
                 
                 __GETW1P:
000364 91ed      	LD   R30,X+
000365 91fc      	LD   R31,X
000366 9711      	SBIW R26,1
000367 9508      	RET
                 
                 __GETW1PF:
000368 9005      	LPM  R0,Z+
000369 91f4      	LPM  R31,Z
00036a 2de0      	MOV  R30,R0
00036b 9508      	RET
                 
                 __PUTPARD1:
00036c 937a      	ST   -Y,R23
00036d 936a      	ST   -Y,R22
00036e 93fa      	ST   -Y,R31
00036f 93ea      	ST   -Y,R30
000370 9508      	RET
                 
                 _delay_ms:
000371 9610      	adiw r26,0
000372 f039      	breq __delay_ms1
                 __delay_ms0:
000373 95a8      	wdr
                +
000374 e888     +LDI R24 , LOW ( 0x1388 )
000375 e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
000376 9701     +SBIW R24 , 1
000377 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
000378 9711      	sbiw r26,1
000379 f7c9      	brne __delay_ms0
                 __delay_ms1:
00037a 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  11 r1 :   1 r2 :   4 r3 :   4 r4 :   4 r5 :   6 r6 :   5 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  37 r17:  30 r18:  27 r19:   8 r20:   9 r21:  17 r22:   7 r23:   3 
r24:  13 r25:   3 r26:  64 r27:  28 r28:  11 r29:   1 r30: 214 r31:  63 
x  :  21 y  : 139 z  :  17 
Registers used: 28 out of 35 (80.0%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :  17 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  34 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   2 cbr   :   1 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  12 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   9 cpc   :   1 cpi   :  33 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   6 jmp   :  32 ld    :  30 ldd   :  57 ldi   :  99 
lds   :   5 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  19 movw  :   8 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   6 out   :  25 pop   :   1 push  :   1 rcall :  41 ret   :  23 
reti  :   2 rjmp  :  64 rol   :   0 ror   :   0 sbc   :   1 sbci  :   5 
sbi   :   4 sbic  :   3 sbis  :   1 sbiw  :  12 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  47 std   :  31 sts   :  40 sub   :   1 subi  :  19 swap  :   0 
tst   :   7 wdr   :   5 
Instructions used: 54 out of 116 (46.6%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006f6   1716     66   1782   16384  10.9%
[.dseg] 0x000100 0x000214      0     20     20    1024   2.0%
[.eseg] 0x000000 0x000001      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
